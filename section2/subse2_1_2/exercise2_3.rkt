#lang racket

(define (abs a) (if (< a 0) (* a -1) a))
(define (make-point x y) (cons x y))
(define (x-coord p) (car p))
(define (y-coord p) (cdr p))
(define (distance-between p1 p2) (sqrt (+ (sqr (- (x-coord p2)
                                                  (x-coord p1)))
                                          (sqr (- (y-coord p2)
                                                  (y-coord p1))))))

(define (make-line-seg p1 p2) (cons p1 p2))
(define (point1 l) (car l))
(define (point2 l) (cdr l))
(define (line-len l) (abs (distance-between (point2 l) (point1 l))))

(define (make-rect rt lt lb rb) (cons (make-line-seg rt lt) (make-line-seg lb rb)))
(define (top-line rect) (car rect))
(define (right-line rect) (let ((p2 (point2 (car rect)))
                                (p3 (point1 (cdr rect))))
                               (make-line-seg p2 p3)))
(define (bottom-line rect) (cdr rect))
(define (left-line rect) (let ((p3 (point2 (cdr rect)))
                               (p1 (point1 (car rect))))
                              (make-line-seg p3 p1)))

(define (point1-rect rect) (point1 (top-line rect)))
(define (point2-rect rect) (point2 (top-line rect)))
(define (point3-rect rect) (point1 (bottom-line rect)))
(define (point4-rect rect) (point2 (bottom-line rect)))

(define (rect-area rect) (* (line-len (top-line rect))
                            (line-len (right-line rect))))
(define (rect-perim rect) (+ (line-len (top-line rect))
                             (line-len (right-line rect))
                             (line-len (bottom-line rect))
                             (line-len (left-line rect))))

(define rectangle (make-rect (make-point 1 1)
                             (make-point 2 1)
                             (make-point 2 2)
                             (make-point 1 2)))
(rect-area rectangle)
(rect-perim rectangle)
